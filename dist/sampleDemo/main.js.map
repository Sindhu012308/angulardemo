{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.ts.AppComponent.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","\n    <h2> Welcome to new world </h2>\n    <h3 class=\"test-success\"> {{name}} </h3>\n    <h3 [class]=\"classdemo\"> Sindhu </h3>\n    <h4 [class.test-danger]=\"danger\"> Danger Demo </h4>  \n    <h4 [ngClass]=\"meassageClasses\"> Danger Demo for multiple classes </h4>  \n    <p [style.color]= \"'purple'\"> This is an example for style binding </p>\n    <p [style.color]= \"danger? 'red': 'pink'\"> This is an example for conditional style binding </p>\n    <p [style.color]= \"highlightColor\"> This is an example for style-color binding from class</p>\n    <p [ngStyle]= \"stylebinding\"> This is an example for style binding from class</p>\n    <button (click)=\"onClick($event)\"> Click me!</button>\n    <p *ngIf=\"danger\"> {{greeting}} </p>\n\n    <button (click)=\"greeting='Welcome Sindhu'\"> welcome</button>\n    {{greeting}} <br/>\n    <br/>\n    <input type=\"text\" #msgvalue/>\n    <button (click)=\"logmessage(msgvalue.value)\"> Log me!</button>\n    <input type=\"text\" [(ngModel)]=\"name\" />\n    {{name}}\n\n\n    <h2 *ngIf=\"danger; else elseBlock\">\n        This is an example of NgIf directive\n    </h2>\n    <ng-template #elseBlock>\n    <h2>\n        This is Else Block \n    </h2></ng-template>\n\n    <div *ngIf=\"danger; then thenBlock; else elseBlock2\" ></div>\n     <ng-template #thenBlock>\n        <h2>\n            This is then block for True condition of ngIf\n        </h2>\n      </ng-template>\n      <ng-template #elseBlock2>\n        <h2>\n            This is Else Block \n        </h2>\n      </ng-template>\n\n      <div [ngSwitch]=\"colour\">\n        <div *ngSwitchCase=\"'red'\">You picked Red color </div>\n        <div *ngSwitchCase=\"'blue'\">You picked Blue Color </div>\n        <div *ngSwitchCase=\"'pink'\">You picked Pink colour </div> \n        <div *ngSwitchDefault> Pick Again! </div>\n      </div>\n\n      <div *ngFor=\"let color1 of colors; index as i; even as e; last as l\">\n        <h2 [style.color]=\"color1\">{{i}} {{e}} {{color1}} {{l}}</h2>\n      </div>\n   ","import { Component, OnInit } from '@angular/core';\nimport { InterpolationConfig } from '@angular/compiler';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <h2> Welcome to new world </h2>\n    <h3 class=\"test-success\"> {{name}} </h3>\n    <h3 [class]=\"classdemo\"> Sindhu </h3>\n    <h4 [class.test-danger]=\"danger\"> Danger Demo </h4>  \n    <h4 [ngClass]=\"meassageClasses\"> Danger Demo for multiple classes </h4>  \n    <p [style.color]= \"'purple'\"> This is an example for style binding </p>\n    <p [style.color]= \"danger? 'red': 'pink'\"> This is an example for conditional style binding </p>\n    <p [style.color]= \"highlightColor\"> This is an example for style-color binding from class</p>\n    <p [ngStyle]= \"stylebinding\"> This is an example for style binding from class</p>\n    <button (click)=\"onClick($event)\"> Click me!</button>\n    <p *ngIf=\"danger\"> {{greeting}} </p>\n\n    <button (click)=\"greeting='Welcome Sindhu'\"> welcome</button>\n    {{greeting}} <br/>\n    <br/>\n    <input type=\"text\" #msgvalue/>\n    <button (click)=\"logmessage(msgvalue.value)\"> Log me!</button>\n    <input type=\"text\" [(ngModel)]=\"name\" />\n    {{name}}\n\n\n    <h2 *ngIf=\"danger; else elseBlock\">\n        This is an example of NgIf directive\n    </h2>\n    <ng-template #elseBlock>\n    <h2>\n        This is Else Block \n    </h2></ng-template>\n\n    <div *ngIf=\"danger; then thenBlock; else elseBlock2\" ></div>\n     <ng-template #thenBlock>\n        <h2>\n            This is then block for True condition of ngIf\n        </h2>\n      </ng-template>\n      <ng-template #elseBlock2>\n        <h2>\n            This is Else Block \n        </h2>\n      </ng-template>\n\n      <div [ngSwitch]=\"colour\">\n        <div *ngSwitchCase=\"'red'\">You picked Red color </div>\n        <div *ngSwitchCase=\"'blue'\">You picked Blue Color </div>\n        <div *ngSwitchCase=\"'pink'\">You picked Pink colour </div> \n        <div *ngSwitchDefault> Pick Again! </div>\n      </div>\n\n      <div *ngFor=\"let color1 of colors; index as i; even as e; last as l\">\n        <h2 [style.color]=\"color1\">{{i}} {{e}} {{color1}} {{l}}</h2>\n      </div>\n   `,\n  //styleUrls: ['./app.component.css']\n  styles:   [`\n    .test-success{\n      color:green;\n    }\n    .test-danger{\n      color:red;\n    }\n    .test-special{\n      font-style:italic;\n      //color: blue;\n    }\n  `]\n})\nexport class AppComponent implements OnInit{\n  name = 'Sindhu';\n public  classdemo=\"test-special\";\n danger=false;\n public isSpecial =true;\n greeting;\n colour=\"blue\";\n public meassageClasses={\n   \"test-success\": !this.danger,\n   \"test-danger\" : this.danger,\n   \"test-special\" : !this.danger\n };\n public stylebinding={\n   fontStyle:\"italic\",\n   color:\"blue\"\n };\n public highlightColor = \"orange\";\n  constructor(){}\n  ngOnInit(){\n  }\n\n  public colors=[\"red\", \"blue\",\"green\",\"grey\"];\n\n  onClick(event){\n    this.danger=true;\n    console.log(event);\n    this.greeting =\"Thanks for Clicking me!\"\n    alert(this.greeting +\"  , this is a \"+ event.type +\"event\");\n    //this.greeting=event.type;\n    \n  }\n  logmessage(mesg){\n    console.log(mesg);\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule} from '@angular/forms';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: true\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}